includes:
  - vendor/symplify/phpstan-rules/config/symplify-rules.neon
  - vendor/symplify/phpstan-rules/config/rector-rules.neon
  - phar://phpstan.phar/conf/bleedingEdge.neon
parameters:
  level: max
  bootstrapFiles:
    - vendor/rector/rector/vendor/autoload.php
  reportUnmatchedIgnoredErrors: true
  paths:
    - rules
    - src
    - tests
  excludePaths:
    - ecs.php
    - rector.php
    - '*tests/*/Fixture/*'
    - '*tests/*/Fixture*'
    - '*tests/*/Source/*'
    - '*tests/*/Source*'
    - '*tests/*/config/*'
    - e2e
  ignoreErrors:
      - '#Parameter \#1 \$node (.*?) of method Cambis\\SilverstripeRector\\(.*?)\:\:(refactor|refactorWithScope)\(\) should be contravariant with parameter \$node \(PhpParser\\Node\) of method Rector\\Contract\\Rector\\(RectorInterface|ScopeAwareRectorInterface)\:\:(refactor|refactorWithScope)\(\)#'

      # We use instanceof checks to verify an object is not null
      -
        message: "#^Instead of \"instanceof/is_a\\(\\)\" use ReflectionProvider service or \"\\(new ObjectType\\(\\<desired_type\\>\\)\\)\\-\\>isSuperTypeOf\\(\\<element_type\\>\\)\" for static reflection to work$#"

      # Ignore this message until there is an alternative way to check if a type is generic
      -
        message: "#^Doing instanceof PHPStan\\\\Type\\\\Generic\\\\GenericObjectType is error\\-prone and deprecated\\.$#"

      -
        message: '#^Use explicit return value over magic &reference$#'
        count: 4
        path: rules/LinkField/NodeManipulator/PropertyManipulator.php

      # We use RelatedConfigInterface to include required services for several rules
      -
        message: '#^Class Cambis\\SilverstripeRector\\(.*?) implements internal interface Rector\\Contract\\DependencyInjection\\RelatedConfigInterface\.$#'
        identifier: class.implementsInternalInterface
